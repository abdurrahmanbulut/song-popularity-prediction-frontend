//
var script = {
  props: {
    listen: {
      type: Boolean,

      default() {
        return false;
      }

    },
    language: {
      type: String,

      default() {
        return 'en-US';
      }

    }
  },

  data() {
    return {
      text: "",
      runtimeTranscription: ""
    };
  },

  methods: {
    listenVoice() {
      if (!this.listen) return;
      window.recognition && window.recognition.start();
    },

    stopListenVoice() {
      this.text = '';
      window.recognition && window.recognition.stop();
    }

  },
  watch: {
    listen(isListen) {
      isListen === true ? this.listenVoice() : this.stopListenVoice();
    },

    text(txt) {
      if (txt !== '') this.$emit('textFromSpeech', txt);
    }

  },

  mounted() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      throw new Error("Speech Recognition does not exist on this browser. Use Chrome or Firefox");
    }

    if (!SpeechRecognition) return;
    const recognition = new SpeechRecognition();
    recognition.interimResults = true; // set language

    recognition.lang = this.language;
    recognition.addEventListener("result", e => {
      // r result
      const text = Array.from(e.results).map(r => r[0]).map(r => r.transcript).join("");
      this.runtimeTranscription = text;
    });
    recognition.addEventListener("end", () => {
      if (this.runtimeTranscription !== "") this.text += ' ' + this.runtimeTranscription;
      this.runtimeTranscription = ""; // listen continuously

      this.listenVoice();
    });
    window.recognition = recognition; // start listen

    if (this.listen) this.listenVoice();
  },

  beforeDestroy() {
    this.stopListenVoice();
  }

};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;
/* template */

var __vue_render__ = function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div");
};

var __vue_staticRenderFns__ = [];
/* style */

const __vue_inject_styles__ = undefined;
/* scoped */

const __vue_scope_id__ = undefined;
/* module identifier */

const __vue_module_identifier__ = undefined;
/* functional template */

const __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

const __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

var __vue_component__$1 = __vue_component__;

/* eslint-disable import/prefer-default-export */

var components = /*#__PURE__*/Object.freeze({
  __proto__: null,
  VueListenVoiceSample: __vue_component__$1
});

// Import vue components

const install = function installVueListenVoice(Vue) {
  Object.entries(components).forEach(_ref => {
    let [componentName, component] = _ref;
    Vue.component(componentName, component);
  });
}; // Create module definition for Vue.use()

export { __vue_component__$1 as VueListenVoiceSample, install as default };
